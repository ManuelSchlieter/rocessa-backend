openapi: 3.0.3
info:
  description: API to manage persons with basic information.
  title: Fullstack Test Person API
  version: 1.0.0
servers:
- url: https://api.example.com/v1
paths:
  /persons:
    get:
      operationId: getAllPersons
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Person'
                type: array
          description: A list of persons
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Get all persons
      x-accepts:
      - application/json
    post:
      operationId: createPerson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: Person created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid input
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Create a new person
      x-accepts:
      - application/json
  /persons/{id}:
    get:
      operationId: getPersonById
      parameters:
      - description: ID of the person to retrieve
        explode: false
        in: path
        name: id
        required: true
        schema:
          example: 1
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: A single person
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Person not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Get a person by ID
      x-accepts:
      - application/json
  /persons/color/{color}:
    get:
      operationId: getPersonsByColor
      parameters:
      - description: Color of the persons to retrieve
        explode: false
        in: path
        name: color
        required: true
        schema:
          example: blau
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Person'
                type: array
          description: A list of persons
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Persons not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal server error
      summary: Get all persons by color
      x-accepts:
      - application/json
components:
  schemas:
    Person:
      example:
        zipcode: "67742"
        color: blau
        city: Lauterecken
        name: Hans
        id: 1
        lastname: Müller
      properties:
        id:
          example: 1
          type: integer
        name:
          example: Hans
          type: string
        lastname:
          example: Müller
          type: string
        zipcode:
          example: "67742"
          type: string
        city:
          example: Lauterecken
          type: string
        color:
          example: blau
          type: string
      type: object
    Error:
      example:
        code: 404
        message: Person not found
      properties:
        code:
          example: 404
          type: integer
        message:
          example: Person not found
          type: string
      type: object
